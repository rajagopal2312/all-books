1. Let

let is a builtin function of Bash that allows us to do simple arithmetic. 
It follows the basic format:

Syntax:
let <arithmetic expression>

The arithmetic expression can take a variety of formats which we'll outline below. 
The first part is generally always a variable which the result is saved into however.

Example:

#!/bin/bash
# Basic arithmetic using let
let a=5+4
echo $a # 9
let "a = 5 + 4"
echo $a # 9
let a++
echo $a # 10
let "a = 4 * 5"
echo $a # 20
let "a = $1 + 30"
echo $a # 30 + first command line argument


Note that if we don't put quotes around the expression then it must be 
written with no spaces.

This time we have used quotes which allow us to space out the expression 
to make it more readable.

This is a shorthand for increment the value of the variable a by 1. 
It is the same as writing "a = a + 1".

We may also include other variables in the expression.


2. Expr

expr is similar to let except instead of saving the result to a variable it 
instead prints the answer. Unlike let you don't need to enclose 
the expression in quotes. 

You also must have spaces between the items of the expression. 
It is also common to use expr within command substitution to save the output to a variable.

Syntax:

expr item1 operator item2

Example:

#!/bin/bash
# Basic arithmetic using expr
expr 5 + 4
expr "5 + 4"
expr 5+4
expr 5 \* $1
expr 11 % 2
a=$( expr 10 - 3 )
echo $a # 7


Note that there must be spaces between the items and no quotes.

If we do put quotes around the expression then the expression will not be evaluated 
but printed instead.

If we do not put spaces between the items of the expression then the expression 
will not be evaluated but printed instead.

Some characters have a special meaning to Bash so we must escape them 
(put a backslash in front of) to remove their special meaning.

The modulus is the remainder when the first item is divided by the second item.

This time we're using expr within command substitution in order to save the result 
to the variable a.


3. Double Parentheses

In the section on Variables we saw that we could save the output of a command 
easily to a variable. It turns out that this mechanism is also able to 
do basic arithmetic for us if we tweak the syntax a little. 


Syntax:
$(( expression ))

Example:

#!/bin/bash
# Basic arithmetic using double parentheses
a=$(( 4 + 5 ))
echo $a # 9
a=$((3+5))
echo $a # 8
b=$(( a + 3 ))
echo $b # 11
b=$(( $a + 4 ))
echo $b # 12
(( b++ ))
echo $b # 13
(( b += 3 ))
echo $b # 16
a=$(( 4 * 5 ))
echo $a # 20



As you can see we may space it out nicely for readability without the need for quotes.

As you can see, it works just the same if we take spacing out.

We may include variables without the preceding $ sign.

Variables can be included with the $ sign if you prefer.

This is a slightly different form. Here the value of the variable b 
is incremented by 1 (using the same mechanism illustrated under let). 
When we do this we don't need the $ sign preceding the brackets.

This is a slightly different form of the previous example. Here the value of the 
variable b is incremented by 3. It is a shorthand for b = b + 3.
Unlike other methods, when we do multiplication we don't need to escape the * sign.



4. Length of a Variable

This isn't really arithmetic but it can be quite useful. 
If you want to find out the lengh of a variable (how many characters) 
you can do the following:

Syntax:
${#variable}

Example:

#!/bin/bash
# Show the length of a variable.
a='Hello World'
echo ${#a} # 11
b=4953
echo ${#b} # 4

