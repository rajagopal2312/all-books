Declaring an Array and Assigning values

In bash, array is created automatically when a variable is 
used in the format like,

Syntax:

name[index]=value

name is any name for an array
index could be any number or expression that must evaluate 
to a number greater than or equal to zero.You can declare an 
explicit array using declare -a arrayname.

Example:

#! /bin/bash
Unix[0]='Debian'
Unix[1]='Red hat'
Unix[2]='Ubuntu'
Unix[3]='Suse'

echo ${Unix[1]}


Example:


#!/bin/bash

array=( A B C D E F G )  
echo "${array[0]}"  
echo "${array[1]}"  
echo "${array[2]}"  
echo "${array[3]}"  
echo "${array[4]}"  
echo "${array[5]}"  
echo "${array[6]}"


Example:

#!/bin/bash

users=(John Harry Jake Scott Philis)  
for u in "${users[@]}"  
do  
    echo "$u is a registered user"
done  


Initializing an array during declaration

Instead of initializing an each element of an array separately, 
you can declare and initialize an array by specifying the list 
of elements (separated by white space) with in a curly braces.

Syntax:
declare -a arrayname=(element1 element2 element3)

If the elements has the white space character, enclose it 
with in a quotes.

Example:

#! /bin/bash
declare -a Unix=('Debian' 'Red hat' 'Red hat' 'Suse' 'Fedora');

declare -a declares an array and all the elements in the parentheses are the 
elements of an array.

Print the Whole Array

There are different ways to print the whole elements of the array. 
If the index number is @ or *, all members of an array are referenced. 
You can traverse through the array elements and print it, using looping statements in bash.

Example:

echo ${Unix[@]}


Length of the Bash Array

We can get the length of an array using the special parameter called $#.

Syntax:

${#arrayname[@]} 

gives you the length of the array.

Example:

declare -a Unix=('Debian' 'Red hat' 'Suse' 'Fedora');
echo ${#Unix[@]} #Number of elements in the array
echo ${#Unix}  #Number of characters in the first element of the array.i.e Debian


Length of the nth Element in an Array

Synatx:

${#arrayname[n]}
 
should give the length of the nth element in an array.

Example:
#! /bin/bash

Unix[0]='Debian'
Unix[1]='Red hat'
Unix[2]='Ubuntu'
Unix[3]='Suse'

echo ${#Unix[3]} # length of the element located at index 3 i.e Suse


Extraction by offset and length for an array:

The following example shows the way to extract 2 elements starting from the 
position 3 from an array called Unix.


Unix=('Debian' 'Red hat' 'Ubuntu' 'Suse' 'Fedora' 'UTS' 'OpenLinux');
echo ${Unix[@]:3:2}


Extraction with offset and length, for a particular element of an array

To extract only first four elements from an array element . 
For example, Ubuntu which is located at the second index of an array, 
you can use offset and length for a particular element of an array.

Example:
#! /bin/bash

Unix=('Debian' 'Red hat' 'Ubuntu' 'Suse' 'Fedora' 'UTS' 'OpenLinux');
echo ${Unix[2]:0:4}

Search and Replace in an array elements:

The following example, searches for Ubuntu in an array elements, 
and replace the same with the word ‘SCO Unix’.

Example:

#!/bin/bash
Unix=('Debian' 'Red hat' 'Ubuntu' 'Suse' 'Fedora' 'UTS' 'OpenLinux');

echo ${Unix[@]/Ubuntu/SCO Unix}


Add an element to an existing Bash Array

The following example shows the way to add an element to the existing array.

Example:
Unix=('Debian' 'Red hat' 'Ubuntu' 'Suse' 'Fedora' 'UTS' 'OpenLinux');
Unix=("${Unix[@]}" "AIX" "HP-UX")
echo ${Unix[7]}

Remove an Element from an Array:

unset is used to remove an element from an array.unset will have the same 
effect as assigning null to an element.

Example:
#!/bin/bash
Unix=('Debian' 'Red hat' 'Ubuntu' 'Suse' 'Fedora' 'UTS' 'OpenLinux');

unset Unix[3]


Copying an Array:

Expand the array elements and store that into a new array as shown below.

Example:

#!/bin/bash
Unix=('Debian' 'Red hat' 'Ubuntu' 'Suse' 'Fedora' 'UTS' 'OpenLinux');
Linux=("${Unix[@]}")
echo ${Linux[@]}


Concatenation of two Bash Arrays

Expand the elements of the two arrays and assign it to the new array.

Example:

#!/bin/bash
Unix=('Debian' 'Red hat' 'Ubuntu' 'Suse' 'Fedora' 'UTS' 'OpenLinux');
Shell=('bash' 'csh' 'jsh' 'rsh' 'ksh' 'rc' 'tcsh');

UnixShell=("${Unix[@]}" "${Shell[@]}")
echo ${UnixShell[@]}
echo ${#UnixShell[@]}


Deleting an Entire Array:

unset is used to delete an entire array.

Example:
#!/bin/bash
Unix=('Debian' 'Red hat' 'Ubuntu' 'Suse' 'Fedora' 'UTS' 'OpenLinux');
Shell=('bash' 'csh' 'jsh' 'rsh' 'ksh' 'rc' 'tcsh');

UnixShell=("${Unix[@]}" "${Shell[@]}")
unset UnixShell
echo ${#UnixShell[@]}



Bash arrays have numbered indexes only, 
but they are sparse, ie you don't have to define all the indexes. 

An entire array can be assigned by enclosing the array items in parenthesis:

arr=(Hello World)

Individual items can be assigned with the familiar array syntax 
(unless you're used to Basic or Fortran):

  arr[0]=Hello
  arr[1]=World

But it gets a bit ugly when you want to refer to an array item:

  echo ${arr[0]} ${arr[1]}

To quote from the man page:
The braces are required to avoid conflicts with pathname expansion.
In addition the following funky constructs are available:

  ${arr[*]}         # All of the items in the array
  ${!arr[*]}        # All of the indexes in the array
  ${#arr[*]}        # Number of items in the array
  ${#arr[0]}        # Length of item zero

The ${!arr[*]} is a relatively new addition to bash, it was not part of the 
original array implementation.

The following example shows some simple array usage (note the "[index]=value" 
assignment to assign a specific index):


Example:

#!/bin/bash

array=(one two three four [5]=five)

echo "Array size: ${#array[*]}"

echo "Array items:"
for item in ${array[*]}
do
    printf "   %s\n" $item
done

echo "Array indexes:"
for index in ${!array[*]}
do
    printf "   %d\n" $index
done

echo "Array items and indexes:"
for index in ${!array[*]}
do
    printf "%4d: %s\n" $index ${array[$index]}
done


Output:

Array size: 5
Array items:
   one
   two
   three
   four
   five
Array indexes:
   0
   1
   2
   3
   5
Array items and indexes:
   0: one
   1: two
   2: three
   3: four
   5: five



Example:

#!/bin/bash

array=("first item" "second item" "third" "item")

echo "Number of items in original array: ${#array[*]}"
for ix in ${!array[*]}
do
    printf "   %s\n" "${array[$ix]}"
done
echo

arr=(${array[*]})
echo "After unquoted expansion: ${#arr[*]}"
for ix in ${!arr[*]}
do
    printf "   %s\n" "${arr[$ix]}"
done
echo

arr=("${array[*]}")
echo "After * quoted expansion: ${#arr[*]}"
for ix in ${!arr[*]}
do
    printf "   %s\n" "${arr[$ix]}"
done
echo

arr=("${array[@]}")
echo "After @ quoted expansion: ${#arr[*]}"
for ix in ${!arr[*]}
do
    printf "   %s\n" "${arr[$ix]}"
done

Outputs:

Number of items in original array: 4
   first item
   second item
   third
   item

After unquoted expansion: 6
   first
   item
   second
   item
   third
   item

After * quoted expansion: 1
   first item second item third item

After @ quoted expansion: 4
   first item
   second item
   third
   item