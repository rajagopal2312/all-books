val l_drg_lkp='';
val l_drg_3_cd='';
val l_dacl_mjdc_cd='';
val l_dacl_utln_lvl_3_cd='';


l_drg_lkp=lookup("drg3lkp", in.mdlx_case_nb);
  // join drg3lkp df) ==> 2 column(mdlx_case_nb,
  //df1.join(df, df1(mdlx_case_nb) === df(mdlx_case_nb)).select(
  mdlx_case_nb,drg_3_cd)

l_drg_3_cd = is_defined(l_drg_lkp.drg_3_cd) && !is_blank(l_drg_lkp.drg_3_cd) ? l_drg_lkp.drg_3_cd : '999';
            

l_dacl_mjdc_cd =

 if(is_defined(string_lrtrim(l_drg_3_cd)))
{
	first_defined( lookup("mdc hdm lkp", string_lrtrim(l_drg_3_cd)).dacl_mjdc_cd,   ' ')
};

As B is small I think the best way to do this would be a broadcast variable and user defined function.

// However you get the data...
case class BType( A2: Int, B2: Int, C2 : Int, D2 : String)
val B = Seq(BType(1,1,1,"B111"), BType(1,1,2, "B112"), BType(2,0,0, "B200"))

val A = sc.parallelize(Seq((1,1,1, "DATA"), (1,1,2, "DATA"), (2, 0, 0, "DATA"), (2, 0, 1, "NONE"), (3, 0, 0, "NONE"))).toDF("A1", "B1", "C1", "OTHER")


// Broadcast B so all nodes have a copy of it.
val Bbradcast = sc.broadcast(B)

// A user defined function to find the value for D2. This I'm sure could be improved by whacking it into maps. But this is a small example. 
val findD = udf {( a: Int, b : Int, c: Int) => Bbradcast.value.find(x => x.A2 == a && x.B2 == b && x.C2 == c).getOrElse(Bbradcast.value.find(x => x.A2 == a && x.B2 == b).getOrElse(BType(0,0,0,"NA"))).D2 }

// Use the UDF in a select
A.select($"A1", $"B1", $"C1", $"OTHER", findD($"A1", $"B1", $"C1").as("D")).show


-------------------------------------------------------------------------------------------------------
import org.apache.spark.sql.functions._
import sqlContext.implicits._
import scala.collection.Map

val emp = Seq((1,"John"),(2,"David"))
val deps = Seq((1,"Admin",1),(2,"HR",2))

val empRdd = sc.parallelize(emp)
val depsDF = sc.parallelize(deps).toDF("DepID","Name","EmpID")


val lookupMap = empRdd.collectAsMap()
def lookup(lookupMap:Map[Int,String]) = udf((empID:Int) => lookupMap.get(empID))

val combinedDF = depsDF
  .withColumn("empNames",lookup(lookupMap)($"EmpID"))
===============================================================================
  If your empDf has multiple columns (e.g. Name,Age), you can use this

val empRdd = empDf.rdd.map{row =>
      (row.getInt(0),(row.getString(1),row.getInt(2)))}


    val lookupMap = empRdd.collectAsMap()
    def lookup(lookupMap:Map[Int,(String,Int)]) =
         udf((empID:Int) => lookupMap.lift(empID))

    depsDF
      .withColumn("lookup",lookup(lookupMap)($"EmpID"))
      .withColumn("empName",$"lookup._1")
      .withColumn("empAge",$"lookup._2")
      .drop($"lookup")
      .show()

================================================================================

val dfBig : DataFrame = ??? 
val dfLookup : DataFrame = ???

val lookupMap = dfLookup
  .map{case Row(category:String,field_values:Int,ratio:Int) => ((category,field_values),ratio)}
  .collect()
  .toMap

val bc_lookupMap = spark.sparkContext.broadcast(lookupMap)

val lookupUdf = udf((field1:Int,field2:Int) =>
  (bc_lookupMap.value(("field_1",field1)),bc_lookupMap.value(("field_2",field2)))
)

dfBig
  .withColumn("udfResult", lookupUdf($"field_1",$"field_2"))
  .select($"primaryId",$"udfResult._1".as("field_1"),$"udfResult._2".as("field_2"))
  
=======================================================================================  

https://stackoverflow.com/questions/48952766/spark-dataframe-column-transformations-using-lookup-for-values-into-other-datafr
https://henning.kropponline.de/2016/12/11/broadcast-join-with-spark/


def first_defined(args:String*):={
for(arg <- args){
if(arg.trim.length >0 and null != arg)
  return arg
}

}




case when dacl_snf_in=='1' OR dacl_baby_in =='1' THEN l_dacl_utln_lvl_3_cd = 'SNF'
     when first_defined(dacl_los_1_cd,dacl_mdlx_los_1_cd,' ') == '55' then l_dacl_utln_lvl_3_cd='ADA';
	 when first_defined(dtln.dacl_los_1_cd,dtln.dacl_mdlx_los_1_cd,' ')=='51' OR first_defined(dtln.dacl_los_1_cd,dacl_mdlx_los_1_cd,' ')=='52' OR 
	      first_defined(dacl_los_1_cd,dacl_mdlx_los_1_cd,' ')=='53' OR first_defined(dacl_los_1_cd,dacl_mdlx_los_1_cd,' ')=='56' THEN  l_dacl_utln_lvl_3_cd='PSY';
	 when first_defined(dacl_utln_lvl_2_cd,dacl_mdlx_utl_2_cd, 'HO')=='HO'	AND   (first_defined(dacl_los_1_cd,dacl_mdlx_los_1_cd,' ')=='I' OR                  	(first_defined(dacl_anc_cd,dacl_mdlx_anc_cd,' ') >='450' AND first_defined(dacl_anc_cd,dacl_mdlx_anc_cd,' ') <='459')) THEN l_dacl_utln_lvl_3_cd='PSY';
	 when first_defined(dacl_utln_lvl_2_cd,dacl_mdlx_utl_2_cd, 'HO'))=='HO' AND dacl_spc_hdr_cd == '36' THEN l_dacl_utln_lvl_3_cd = 'OTH';
/*	 when first_defined(dacl_utln_lvl_2_cd,dacl_mdlx_utl_2_cd, 'HO'))=='HO' AND 
is_defined(lookup("spc_spg_hdm_lkp", string_lrtrim(in.summ.dacl_spc_hdr_cd)).dacl_utln_lvl_3_cd)
	 else if(string_lrtrim(first_defined(string_lrtrim(in.header.dacl_utln_lvl_2_cd),string_lrtrim(in.summ.dacl_mdlx_utl_2_cd), 'HO'))=='HO' &&
is_defined(lookup("spc_spg_hdm_lkp", string_lrtrim(in.summ.dacl_spc_hdr_cd)).dacl_utln_lvl_3_cd))
{
	l_dacl_utln_lvl_3_cd = lookup("spc_spg_hdm_lkp", string_lrtrim(in.summ.dacl_spc_hdr_cd)).dacl_utln_lvl_3_cd 
}*/
    when first_defined(indacl_anc_cd,in.dacl_mdlx_anc_cd,' ')) >='360' and first_defined(in.dacl_anc_cd,in.dacl_mdlx_anc_cd,' ') <='369' then l_dacl_utln_lvl_3_cd='SUR'; 


if(dacl_snf_in=='1') 
{
  l_dacl_utln_lvl_3_cd = 'SNF';
}
else if(dacl_baby_in =='1')
{
   l_dacl_utln_lvl_3_cd = 'SNF';
}
else if(string_lrtrim(first_defined(dacl_los_1_cd,dacl_mdlx_los_1_cd,' '))=='55')
{
	 l_dacl_utln_lvl_3_cd='ADA';
}
else if((string_lrtrim(first_defined(dtln.dacl_los_1_cd,dtln.dacl_mdlx_los_1_cd,' '))=='51'||
    string_lrtrim(first_defined(dtln.dacl_los_1_cd,dacl_mdlx_los_1_cd,' '))=='52'||
    string_lrtrim(first_defined(dacl_los_1_cd,dacl_mdlx_los_1_cd,' '))=='53'||
    string_lrtrim(first_defined(dacl_los_1_cd,dacl_mdlx_los_1_cd,' '))=='56')
	)
{
		  l_dacl_utln_lvl_3_cd='PSY';
}
else if(string_lrtrim(first_defined(string_lrtrim(in.dacl_utln_lvl_2_cd),string_lrtrim(in.dacl_mdlx_utl_2_cd), 'HO'))=='HO' &&
  ((string_lrtrim(first_defined(dacl_los_1_cd,dacl_mdlx_los_1_cd,' '))=='I') ||
    (string_lrtrim(first_defined(dacl_anc_cd,dacl_mdlx_anc_cd,' ')) >='450' &&
     string_lrtrim(first_defined(dacl_anc_cd,dacl_mdlx_anc_cd,' ')) <='459')))
{
		  l_dacl_utln_lvl_3_cd='PSY';
}
else if(string_lrtrim(first_defined(string_lrtrim(in.dacl_utln_lvl_2_cd),string_lrtrim(in.dacl_mdlx_utl_2_cd), 'HO'))=='HO' && 
in.summ.dacl_spc_hdr_cd == '36') 
{
	l_dacl_utln_lvl_3_cd = 'OTH';
}
else if(string_lrtrim(first_defined(string_lrtrim(in.header.dacl_utln_lvl_2_cd),string_lrtrim(in.summ.dacl_mdlx_utl_2_cd), 'HO'))=='HO' &&
is_defined(lookup("spc_spg_hdm_lkp", string_lrtrim(in.summ.dacl_spc_hdr_cd)).dacl_utln_lvl_3_cd))
{
	l_dacl_utln_lvl_3_cd = lookup("spc_spg_hdm_lkp", string_lrtrim(in.summ.dacl_spc_hdr_cd)).dacl_utln_lvl_3_cd 
}
else if(string_lrtrim(first_defined(indacl_anc_cd,in.dacl_mdlx_anc_cd,' ')) >='360' &&
                     string_lrtrim(first_defined(in.dacl_anc_cd,in.dacl_mdlx_anc_cd,' ')) <='369' )
{
	  l_dacl_utln_lvl_3_cd='SUR'; 
}
else{
            if(is_null(l_drg_3_cd)) l_dacl_utln_lvl_3_cd='OTH'; 
            else if(l_dacl_mjdc_cd=='20') l_dacl_utln_lvl_3_cd='ADA';
            else if(l_dacl_mjdc_cd=='14'||l_dacl_mjdc_cd=='15') l_dacl_utln_lvl_3_cd='MAT';
            else if(l_dacl_mjdc_cd=='19') l_dacl_utln_lvl_3_cd='PSY';
            else if (is_defined(l_drg_3_cd))  l_dacl_utln_lvl_3_cd= lookup("mdc hdm lkp", l_drg_3_cd).dacl_mdc_svtp_cd;
            else l_dacl_utln_lvl_3_cd='OTH';
}


  out.dacl_utln_lvl_3_cd :1: l_dacl_utln_lvl_3_cd;
  out.dacl_utln_lvl_3_cd :2: 'OTH';
  
  out.dacl_drg_2_cd :: ' ';
  out.dacl_drg_3_cd :: l_drg_3_cd;